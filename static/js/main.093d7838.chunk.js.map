{"version":3,"sources":["utils/index.js","components/ECommerce/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","ECommerce","props","state","dataLength","eCommerceData","length","allItems","totalItems","addItem","bind","buyItem","checkItem","checkItemsTotal","startEventListeners","Utils","window","Swal","title","type","item","price","parseFloat","Math","random","toFixed","id","push","className","key","src","image","alt","name","onClick","setState","send","shouldPollResponse","callValue","Total","watch","err","result","console","log","fire","checkTotal","stop","Availability","available","checkAvailability","Purchased","html","seller","buyer","Added","exists","Component","TronLinkInfo","accountAddress","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","trx","getAccount","account","address","accountAddressInBase58","fromHex","getBalance","balanceInSun","balanceInTRX","fromSun","getBandwidth","WEBSTORE_URL","logo","TronLinkLogo","openTronLink","open","TronLinkGuide","installed","href","target","rel","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","document","getElementById","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.093d7838.chunk.js","sourcesContent":["const utils = {\n  tronWeb: false,\n  contract: false,\n\n  setTronWeb(tronWeb) {\n    this.tronWeb = tronWeb;\n  },\n\n  async setContract(tronWeb, contractAddress) {\n    this.contract = await tronWeb.contract().at(contractAddress);\n  }\n};\n\nexport default utils;\n","import React, { Component } from \"react\";\nimport Swal from \"sweetalert2\";\n\nimport Utils from \"../../utils\";\nimport eCommerceData from \"./eCommerce-data\";\nimport \"./ECommerce.scss\";\n\n/// La direccion de su contrato acá ///////////////////////////////////\nconst contractAddress = \"41A03ED915BAAA7C556C0A9624B3130E74162453F4\";\n// base85v = \"TQaWQWLW8Nz8Nf9qnAxQZLMCNvPQEa81BT\"\n// hex = \"41A03ED915BAAA7C556C0A9624B3130E74162453F4\"\n///////////////////////////////////////////////////////////////////////\n\nexport default class ECommerce extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataLength: eCommerceData.length,\n      allItems: [],\n      totalItems: 0\n    };\n\n    this.addItem = this.addItem.bind(this);\n    this.buyItem = this.buyItem.bind(this);\n    this.checkItem = this.checkItem.bind(this);\n    this.checkItemsTotal = this.checkItemsTotal.bind(this);\n    this.startEventListeners = this.startEventListeners.bind(this);\n  }\n\n\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n    this.startEventListeners();\n  }\n\n  addItem() {\n    const { totalItems, dataLength, allItems } = this.state;\n\n    if (totalItems >= dataLength) {\n      Swal({\n        title: \"No hay más items que agregar.\",\n        type: \"error\"\n      });\n      return;\n    }\n\n    let item = eCommerceData[totalItems];\n    item.price = parseFloat(Math.random() * 10).toFixed(0);\n    item.id = totalItems;\n\n    allItems.push(\n      <div className=\"eCommerce-item\" key={item.id}>\n        <img className=\"item-image\" src={item.image} alt={item.name} />\n        <div className=\"item-name\">{item.name}</div>\n        <div className=\"price-buy-container\">\n          <div className=\"item-price\">{item.price} TRX</div>\n          <button\n            className=\"buy-button btn btn-success\"\n            onClick={() => this.buyItem(item.id, item.price)}\n          >\n            Comprar\n          </button>\n          <button\n            className=\"buy-button btn btn-warning\"\n            onClick={() => this.checkItem(item.id)}\n          >\n            verificar\n          </button>\n        </div>\n      </div>\n    );\n\n    this.setState({\n      totalItems: totalItems + 1\n    });\n\n    Utils.contract.addItem(item.name, item.price).send({\n      shouldPollResponse: true\n    });\n  }\n\n  async checkItemsTotal() {\n    Utils.contract.checkItemsTotal().send({\n      callValue: 0\n    });\n\n    let checkTotal = await Utils.contract.Total().watch((err, { result }) => {\n      if (err) return console.log(\"falló al escuchar el evento\", err);\n      if (result) {\n        Swal.fire({\n          title: `este contrato tiene ${result.totalItems} items.`,\n          type: \"Exitoso\"\n        });\n        checkTotal.stop();\n      }\n    });\n  }\n\n  async checkItem(id) {\n    Utils.contract.checkItem(id).send({\n      callValue: 0\n    });\n\n    let checkAvailability = await Utils.contract\n      .Availability()\n      .watch((err, { result }) => {\n        if (err) return console.log(\"falló al escuchar el evento\", err);\n        if (result) {\n          Swal.fire({\n            title: `Disponible: ${result.available}.`,\n            type: result.available ? \"Exitoso\" : \"error\"\n          });\n          checkAvailability.stop();\n        }\n      });\n  }\n\n  buyItem(id, price) {\n    Utils.contract.buyItem(id).send({\n      shouldPollResponse: true,\n      callValue: price * 1000000 // convertir a SUN\n    });\n  }\n\n  startEventListeners() {\n    Utils.contract.Purchased().watch((err, { result }) => {\n      if (err) return console.log(\"falló al escuchar el evento\", err);\n      if (result) {\n        Swal.fire({\n          title: `${result.name} ha sido comprador por ${result.price}.`,\n          html:\n            `<p>Vendedor: ${result.seller}</p><p>Comprador: ${result.buyer}</p>`,\n          type: \"Completado\"\n        });\n      }\n    });\n\n    Utils.contract.Added().watch((err, { result }) => {\n      if (err) return console.log(\"falló al escuchar el evento\", err);\n      if (result) {\n        Swal.fire({\n          title: `${result.name} ha sido añadido por ${result.price}.`,\n          html:\n            `<p>Vendedor: ${result.seller}</p>` +\n            `<p>Añadido: ${result.exists}</p>` +\n            `<p>Disponible: ${result.available}</p>`,\n          type: \"Completado\"\n        });\n      }\n    });\n  }\n\n  render() {\n    const { allItems, totalItems } = this.state;\n    return (\n      <div className=\"eCommerce-component-container\">\n        <div className=\"eCommerce-component-dash\">\n          <div>Total Items en la tienda: {totalItems}</div>\n          <button className=\"btn btn-primary\" onClick={this.checkItemsTotal}>Ver todos los items</button>\n          <button className=\"btn btn-primary\" onClick={this.addItem}>Añadir Item</button>\n        </div>\n        <div className=\"eCommerce-item-container\">{allItems}</div>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\n\nimport \"./TronLinkInfo.scss\";\n\nexport default class TronLinkInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      accountAddress: \"account address will show up here\",\n      accountBalance: \"account balance will show up here\",\n      accountBandwidth: \"account bandwidth will show up here\"\n    };\n  }\n\n  // Uncomment each call one at a time to see your account information filled out\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n    this.fetchAccountBandwidth();\n  }\n\n  // // The function below will return an object with address, balance, create_time,\n  // // account_resource;\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n     const accountAddressInBase58 = window.tronWeb.address.fromHex(\n       accountAddress\n     ); // Base58\n\n    this.setState({\n      accountAddress: accountAddressInBase58\n    });\n  }\n  //\n  // // The function below will return the account balance in SUN as a number\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      //accountBalance: balanceInSun // Muestra el balance en SUN\n      accountBalance: balanceInTRX\n    });\n  }\n  //\n  // // The function below will return the account bandwidth as a number\n  async fetchAccountBandwidth() {\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\n\n    this.setState({\n      accountBandwidth: accountBandwidth\n    });\n  }\n\n  render() {\n    const { accountAddress, accountBalance, accountBandwidth } = this.state;\n    return (\n      <div className=\"tronLinkInfo-component-container\">\n        <div className=\"account-info-header\"> Account Information </div>\n        <div className=\"account-info-address\">\n          Address: <span>{accountAddress}</span>\n        </div>\n        <div className=\"account-info-balance\">\n          Balance: <span>{accountBalance}</span>\n        </div>\n        <div className=\"account-info-bandwidth\">\n          Bandwidth: <span>{accountBandwidth}</span>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","import React, { Component } from \"react\";\nimport TronWeb from \"tronweb\";\n\nimport Utils from \"../../utils\";\nimport ECommerce from \"../ECommerce\";\nimport TronLinkInfo from \"../TronLinkInfo\";\nimport TronLinkGuide from \"../TronLinkGuide\";\nimport \"./App.scss\";\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await new Promise(resolve => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false\n            }\n          });\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) {\n          return tries++;\n        }\n\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object if TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS\n      };\n\n      window.tronWeb.on(\"addressChange\", () => {\n        if (this.state.tronWeb.loggedIn) {\n          return;\n        }\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true\n          }\n        });\n      });\n    }\n\n    Utils.setTronWeb(window.tronWeb);\n  }\n\n  render() {\n    if (!this.state.tronWeb.installed) return <TronLinkGuide />;\n\n    if (!this.state.tronWeb.loggedIn) return <TronLinkGuide installed />;\n\n    return (\n      <div>\n        <header className=\"header-container\">\n          <div className=\"resource-links-container\">\n            <div className=\"app-title\">TRX-Comercio</div>\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Guías\n            </a>\n            &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              API Reference\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronscan.org/#/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronScan\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronstation.io/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronStation\n            </a>\n          </div>\n          <TronLinkInfo />\n        </header>\n        <div>\n          <ECommerce />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// {tWeb()}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nvar root = document.getElementById(\"root\");\n\nReactDOM.render(<App />, root);\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}